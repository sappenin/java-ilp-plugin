syntax = "proto3";

option java_multiple_files = false;
option java_package = "org.interledger.plugin.lpiv2.bpp.grpc";
option java_outer_classname = "PluginProto";
option objc_class_prefix = "LPI";

package interledger;

import public "google/protobuf/timestamp.proto";
import public "google/protobuf/empty.proto";

// An ILP Plugin RPC service that uses non-streaming RPC calls to speak ILPv4 directly between two peers.
// Note that any custom information must be supplied in meta-data using gRPC headers, since there is not direct support
// for sub-protocols in the org.interledger.bilateral protcol (though there is always the ILP packet data that can be used for ILP
// sub-protocols).
service IlpPlugin {
    // Sends a PreparePacket to the Bilateral Peer
    rpc SendData (SendDataRequest) returns (SendDataResponse) {
    }

    // Send Proof of Payment or other Settlement info to the Bilateral Peer.
    rpc SendMoney (TransferRequest) returns (google.protobuf.Empty) {
    }
}

// An Interledger Prepare Packet.
message SendDataRequest {
    bytes preparePacketBytes = 1; // The InterledgerPrepare, encoded using ASN.1 OER
}

// An Interledger Fulfill or Reject Packet
message SendDataResponse {
    enum Type {
        FULFILL = 0;
        REJECT = 1;
    }
    Type type = 1;
    bytes ilpPacketBytes = 2;
}

// Transfer is used to send proof of payment, payment channel claims, or other settlement information to the other side
// of a org.interledger.bilateral connection. The amount should indicate the additional value of this settlement state (compared to the
// previous settlement state), in a unit that was agreed out-of-band.
message TransferRequest {
    int64 amount = 1;
}