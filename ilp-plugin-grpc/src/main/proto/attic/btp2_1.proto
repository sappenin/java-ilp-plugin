syntax = "proto3";

option java_multiple_files = false;
option java_package = "org.interledger.plugin.btp21";
//option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "BTP21";

package interledger;

//import public "google/protobuf/timestamp.proto";
//
//service Btp21 {
//    // Sends a Message to the Bilateral Peer
//    rpc SendMessage (stream BilateralMessage) returns (stream BilateralResponse) {
//    }
//
//    // Send Proof of Payment or other Settlement info to the Bilateral Peer.
//    rpc SendTransfer(stream BilateralTransfer) returns (stream BilateralResponse) {
//    }
//}
//
//message SubProtocolData {
//    string protocolName = 1;
//    int32 contentType = 2;
//    bytes data = 3;
//}
//
//// Message is used for sending information to the peer. It contains no packet-specific data, only protocol data. ILP
//// packets are attached under the protocol name `ilp` with content-type `application/octet-stream`.
//message BilateralMessage {
//    SubProtocolData protocolData = 1;
//}
//
//// Transfer is used to send proof of payment, payment channel claims, or other settlement information to the other side
//// of a org.interledger.bilateral connection. The amount should indicate the additional value of this settlement state (compared to the
//// previous settlement state), in a unit that was agreed out-of-band.
//message BilateralTransfer {
//    int64 amount = 1;
//    SubProtocolData protocolData = 2;
//}
//
//// The response message containing the greetings
//message BilateralResponse {
//    SubProtocolData protocolData = 2;
//}
//
//// A response-type message, returned when an error occurs on the BTP level.
//message BilateralError {
//
//    enum Codes {
//        T00 = 0; // UnreachableError
//        F00 = 1; // NotAcceptedError
//        F01 = 2; // InvalidFieldsError
//        F03 = 3; // TransferNotFoundError
//        F04 = 4; // InvalidFulfillmentError
//        F05 = 5; // DuplicateIdError
//        F06 = 6; // AlreadyRolledBackError
//        F07 = 7; // AlreadyFulfilledError
//        F08 = 8; // InsufficientBalanceError
//    }
//
//    // Standardized error code
//    Codes code = 1;
//    // Time of emission
//    google.protobuf.Timestamp triggeredAt = 2;
//    // Additional error data
//    string errorMessage = 3;
//
//    SubProtocolData protocolData = 4;
//
//    enum Errors {
//        UNREACHABLE_ERROR = 0;
//        NOT_ACCEPTED_ERROR = 1;
//        INVALID_FIELDS_ERROR = 2;
//        TRANSFER_NOT_FOUND_ERROR = 3;
//        INVALID_FULFILLMENT_ERROR = 4;
//        DUPLICATE_ID_ERROR = 5;
//        ALREADY_ROLLED_BACK_ERROR = 6;
//        ALREADY_FULFILLED_ERROR = 7;
//        INSUFFICIENT_BALANCE_ERROR = 8;
//    }
//
//}

