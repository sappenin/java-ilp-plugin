syntax = "proto3";

option java_multiple_files = false;
option java_package = "org.interledger.grpc.bpp";
option java_outer_classname = "GrinterledgerBppProto";
option objc_class_prefix = "GBPP";

package interledger;

import public "google/protobuf/empty.proto";

// Grinterledger BPP: The gRPC Interledger Bilateral Push Protocol is a synchronous RPC service (i.e., non-streaming)
// that allows nodes to send and receive org.interledger.bilateral messages, possibly relating to multiple accounts,
// using the same gRPC transport. In this setup, each node operates a single gRPC client and a single gRPC server.
// Incoming requests come in from the remote on the gRPC server, and outgoing requests go out to the remote using the
// gRPC client.

// Note that any custom information for these request must be supplied in meta-data using gRPC headers, since there is
// no direct support for sub-protocols in this protocol.
service GrinterledgerBpp {

    rpc TestConnection (google.protobuf.Empty) returns (google.protobuf.Empty) {
    }

    // Send an ILP Prepare packet.
    rpc Send (GrinterledgerBppPrepare) returns (GrinterledgerBppResponse) {
    }
}

// An envelope for an Interledger Prepare Packet.
message GrinterledgerBppPrepare {
    bytes preparePacketBytes = 1;
}

// An envelope for an Interledger Packet (fulfill, or reject).
message GrinterledgerBppResponse {
    bytes responsePacketBytes = 1;
}